@model Template.Web.Features.AreaPersonale.AreaPersonaleViewModel
@{
    ViewData["Title"] = "Area Personale";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<style>
    .calendar-grid {
        display: grid;
        gap: 10px;
    }

    .view-month {
        grid-template-columns: repeat(7, 1fr);
    }

    .view-week {
        grid-template-columns: repeat(7, 1fr);
    }

    .view-day {
        grid-template-columns: 1fr;
    }

    .calendar-cell {
        border: 1px solid #dee2e6;
        border-radius: 6px;
        padding: 10px;
        min-height: 120px;
        background-color: #f8f9fa;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        position: relative;
    }

        .calendar-cell strong {
            display: block;
            margin-bottom: 5px;
        }

    .calendar-totale {
        margin-top: 10px;
        font-weight: 600;
    }

    .active-view {
        font-weight: bold;
        text-decoration: underline;
    }

    .bg-warning {
        background-color: #fff3cd !important;
    }

    .bg-info {
        background-color: #d1ecf1 !important;
    }
</style>

<div class="container-fluid px-3 px-sm-4 px-md-4 mt-4 mb-5">
    <h1 class="mb-4">Area Personale</h1>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i> @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    else if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row mb-4">
        <div class="col-6 col-md-3">
            <div class="bg-light p-2 rounded text-center">@Model.Nome @Model.Cognome</div>
        </div>
        <div class="col-6 col-md-3">
            <div class="bg-light p-2 rounded text-center">@Model.Ruolo</div>
        </div>
    </div>

    <h3 class="mb-3">Task in lavorazione</h3>
    <div class="row">
        @foreach (var task in Model.TaskInLavorazione)
        {
            <div class="col-12 mb-3">
                <div class="d-flex flex-column flex-md-row align-items-md-center p-3 border rounded bg-white shadow-sm">
                    <div class="flex-grow-1 mb-2 mb-md-0">@task.Descrizione</div>
                    <div class="px-3 py-2 bg-@task.StatoColore text-black rounded me-md-2">
                        Scadenza: @task.DataScadenza.ToString("dd/MM/yyyy")
                    </div>
                    <div class="me-md-2"><i class="bi bi-info-circle"></i></div>
                    <a asp-controller="Dettagli"
                       asp-action="Details"
                       asp-route-id="@task.Id"
                       class="btn btn-primary btn-sm ms-auto">
                        <i class="bi bi-gear-fill me-1"></i> Gestisci Task
                    </a>
                </div>
            </div>
        }
    </div>

    <div class="mt-4 mb-5 d-flex flex-wrap gap-2">
        <a class="btn btn-dark" href="@Url.Action("Storico", "Storico")">Storico task</a>
        <a class="btn btn-primary" href="@Url.Action("Disponibili", "Disponibili")">Task Disponibili</a>
        <a class="btn btn-outline-dark" href="@Url.Action("Task", "Task")">Crea Task</a>
    </div>

    <hr />
    <h4 class="mb-3">Aggiunta ferie/permessi (seleziona intervallo date)</h4>
    <form asp-action="AggiungiFeriePermesso" method="post" class="mb-4">
        @Html.AntiForgeryToken()

        <div class="row">
            <div class="col-md-4">
                <label for="dataInizio">Data Inizio</label>
                <input type="date" name="dataInizio" class="form-control" required />
            </div>
            <div class="col-md-4">
                <label for="dataFine">Data Fine</label>
                <input type="date" name="dataFine" class="form-control" required />
            </div>
            <div class="col-md-4">
                <label for="tipo">Tipo</label>
                <select name="tipo" class="form-control" required>
                    <option value="">Seleziona</option>
                    <option value="Ferie">Ferie</option>
                    <option value="Permesso">Permesso</option>
                </select>
            </div>
            <div class="col-md-12 d-flex justify-content-end mt-3">
                <button type="submit" class="btn btn-primary">Salva</button>
            </div>
        </div>
    </form>

    <div class="row mt-5">
        <div class="col-12">
            <h5>Rendiconto ore lavorate e giorni di ferie/permesso</h5>

            <div class="d-flex justify-content-between align-items-center my-3 flex-wrap gap-2">
                <div>
                    <button id="prevBtn" class="btn btn-outline-secondary">&lt;</button>
                    <button id="nextBtn" class="btn btn-outline-secondary">&gt;</button>
                    <span id="viewLabel" class="ms-3 fw-semibold"></span>
                </div>
                <div class="btn-group">
                    <button class="btn btn-sm btn-outline-dark" onclick="setView('month')" id="btnMonth">Mese</button>
                    <button class="btn btn-sm btn-outline-dark" onclick="setView('week')" id="btnWeek">Settimana</button>
                    <button class="btn btn-sm btn-outline-dark" onclick="setView('day')" id="btnDay">Giorno</button>
                </div>
            </div>

            <div id="calendar" class="calendar-grid view-month"></div>
            <div class="calendar-totale text-end mt-3" id="weeklyTotal"></div>
        </div>
    </div>

    <script>
        const logs = [
        @foreach (var r in Model.RendicontoLogs)
        {
            <text>{ data: "@DateTime.ParseExact(r.Data, "dd/MM/yyyy", null).ToString("yyyy-MM-dd")", task: "@r.TitoloTask", inizio: "@r.OrarioInizio", fine: "@r.OrarioFine", ore: @r.OreLavorate },</text>
        }
        ];

        const daysOff = [
        @foreach (var fp in Model.FeriePermessoLogs)
        {
            <text>{ date: "@DateTime.ParseExact(fp.Data, "dd/MM/yyyy", null).ToString("yyyy-MM-dd")", type: "@fp.Tipo" },</text>
        }
        ];

        let currentDate = new Date();
        let currentView = 'month';

        const calendarEl = document.getElementById("calendar");
        const viewLabel = document.getElementById("viewLabel");
        const totalEl = document.getElementById("weeklyTotal");

        function toLocalISO(date) {
            return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
        }

        function setView(view) {
            currentView = view;
            calendarEl.className = `calendar-grid view-${view}`;
            document.querySelectorAll('.btn-group .btn').forEach(btn => btn.classList.remove("active-view"));
            document.getElementById(`btn${view.charAt(0).toUpperCase() + view.slice(1)}`).classList.add("active-view");
            render();
        }

        function formatDateLabel(date) {
            return date.toLocaleDateString("it-IT", { month: "long", year: "numeric" });
        }

        function render() {
            calendarEl.innerHTML = '';
            totalEl.innerHTML = '';
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            let cells = [];

            if (currentView === 'month') {
                viewLabel.innerText = formatDateLabel(currentDate);
                const firstDay = new Date(year, month, 1);
                const startWeekDay = (firstDay.getDay() + 6) % 7;
                const calendarStart = new Date(firstDay);
                calendarStart.setDate(firstDay.getDate() - startWeekDay);

                for (let i = 0; i < 42; i++) {
                    const current = new Date(calendarStart);
                    current.setDate(calendarStart.getDate() + i);
                    const dateStr = toLocalISO(current);
                    const dailyLogs = logs.filter(l => l.data === dateStr);
                    const off = daysOff.find(d => d.date === dateStr);
                    cells.push({ date: current.getDate(), fullDate: dateStr, logs: dailyLogs, offType: off?.type, isOtherMonth: current.getMonth() !== month });
                }
            } else if (currentView === 'week') {
                const start = new Date(currentDate);
                start.setDate(start.getDate() - ((start.getDay() + 6) % 7));
                viewLabel.innerText = "Settimana di " + start.toLocaleDateString("it-IT");
                let weekTotal = 0;

                for (let i = 0; i < 7; i++) {
                    const d = new Date(start);
                    d.setDate(start.getDate() + i);
                    const dateStr = toLocalISO(d);
                    const dailyLogs = logs.filter(l => l.data === dateStr);
                    const off = daysOff.find(d => d.date === dateStr);
                    const ore = dailyLogs.reduce((sum, l) => sum + l.ore, 0);
                    weekTotal += ore;
                    cells.push({ date: d.getDate(), fullDate: dateStr, logs: dailyLogs, offType: off?.type });
                }

                totalEl.innerText = `Totale settimana: ${weekTotal}h`;
            } else if (currentView === 'day') {
                const dateStr = toLocalISO(currentDate);
                const dailyLogs = logs.filter(l => l.data === dateStr);
                const off = daysOff.find(d => d.date === dateStr);
                const ore = dailyLogs.reduce((sum, l) => sum + l.ore, 0);
                cells.push({ date: currentDate.getDate(), fullDate: dateStr, logs: dailyLogs, offType: off?.type });
                viewLabel.innerText = `Giorno ${currentDate.toLocaleDateString("it-IT")}`;
                totalEl.innerText = `Ore lavorate: ${ore}h`;
            }

            for (const cell of cells) {
                const el = document.createElement("div");
                el.classList.add("calendar-cell");
                if (cell.isOtherMonth) el.classList.add("text-muted");
                if (cell.offType === "Ferie") el.classList.add("bg-warning");
                else if (cell.offType === "Permesso") el.classList.add("bg-info");

                el.innerHTML = `<strong>${cell.date}</strong>`;
                if (cell.logs.length === 0 && !cell.offType) {
                    el.innerHTML += `<div class="text-muted small">Nessun task</div>`;
                } else {
                    if (cell.offType) {
                        el.innerHTML += `<div class="small mt-1 fw-bold">${cell.offType}</div>`;
                    }
                    let dailyTotal = 0;
                    cell.logs.forEach(log => {
                        el.innerHTML += `
                            <div class="small mt-1">
                                <div><strong>${log.task}</strong></div>
                                <div>${log.inizio} - ${log.fine}</div>
                                <div>${log.ore}h</div>
                            </div>`;
                        dailyTotal += log.ore;
                    });
                    if (dailyTotal > 0) {
                        el.innerHTML += `<div class="calendar-totale text-end text-primary">${dailyTotal}h</div>`;
                    }
                }
                calendarEl.appendChild(el);
            }
        }

        document.getElementById("prevBtn").addEventListener("click", () => {
            if (currentView === 'month') currentDate.setMonth(currentDate.getMonth() - 1);
            if (currentView === 'week') currentDate.setDate(currentDate.getDate() - 7);
            if (currentView === 'day') currentDate.setDate(currentDate.getDate() - 1);
            render();
        });

        document.getElementById("nextBtn").addEventListener("click", () => {
            if (currentView === 'month') currentDate.setMonth(currentDate.getMonth() + 1);
            if (currentView === 'week') currentDate.setDate(currentDate.getDate() + 7);
            if (currentView === 'day') currentDate.setDate(currentDate.getDate() + 1);
            render();
        });

        setView('month');
    </script>
</div>
