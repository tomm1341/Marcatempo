@model Template.Web.Features.AreaPersonale.AreaPersonaleViewModel
@{
    ViewData["Title"] = "Area Personale";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    function aggiungiOaggiornaRiga() {
        const giorno = document.getElementById('inputGiorno').value.trim();
        const inizio = document.getElementById('inputInizio').value;
        const fine = document.getElementById('inputFine').value;

        if (!giorno || !inizio || !fine) return;

        const oreTotali = calcolaOre(inizio, fine);
        if (oreTotali < 0) return;

        const tbody = document.getElementById('rendicontoBody');
        let existingRow = document.querySelector(`#rendicontoBody tr[data-giorno="${giorno}"]`);

        const newRow = `
            <td>${giorno}</td>
            <td>${inizio}</td>
            <td>${fine}</td>
            <td class="ore">${oreTotali}</td>
        `;

        if (existingRow) {
            existingRow.innerHTML = newRow;
        } else {
            const row = document.createElement('tr');
            row.setAttribute('data-giorno', giorno);
            row.innerHTML = newRow;
            tbody.appendChild(row);
        }

        aggiornaTotaleOre();
    }

    function calcolaOre(start, end) {
        const [h1, m1] = start.split(':').map(Number);
        const [h2, m2] = end.split(':').map(Number);
        return ((h2 * 60 + m2) - (h1 * 60 + m1)) / 60;
    }

    function aggiornaTotaleOre() {
        const ore = [...document.querySelectorAll('.ore')].map(el => parseFloat(el.textContent));
        const totale = ore.reduce((sum, val) => sum + val, 0);
        document.getElementById('oreTotali').textContent = totale.toFixed(1);
    }
</script>

<div class="container py-5">
    <h2 class="mb-4">Area Personale</h2>

    <!-- Info utente -->
    <div class="row mb-4">
        <div class="col-6 col-md-3">
            <div class="bg-light p-2 rounded text-center">@Model.Nome @Model.Cognome</div>
        </div>
        <div class="col-6 col-md-3">
            <div class="bg-light p-2 rounded text-center">@Model.Ruolo</div>
        </div>
    </div>

    <!-- Task -->
    <h5 class="mb-3">Task in lavorazione</h5>
    <div class="row">
        @foreach (var task in Model.TaskInLavorazione)
        {
            <div class="col-12 mb-3">
                <div class="d-flex flex-column flex-md-row align-items-md-center p-3 border rounded bg-white shadow-sm">

                    <div class="flex-grow-1 mb-2 mb-md-0">
                        <strong>@task.Descrizione</strong>
                    </div>

                    <div class="px-3 py-2 bg-@task.StatoColore text-white rounded me-md-2">
                        @task.DataScadenza.ToString("dd/MM/yyyy")
                    </div>

                    <div class="me-md-2"><i class="bi bi-info-circle"></i></div>

                    <button class="btn btn-primary btn-sm"
                            onclick="location.href='@Url.Action("Details", "Dettagli", new { id = task.Id })'">
                        Completa
                    </button>
                </div>
            </div>
        }
    </div>



    <!-- Rendiconto -->
    <div class="row">
        <div class="col-md-6 mb-4">
            <h5>Rendiconto settimanale</h5>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Giorno</th>
                        <th>Data</th>
                        <th>Inizio</th>
                        <th>Fine</th>
                        <th>Ore</th>
                    </tr>
                </thead>
                <tbody id="rendicontoBody">
                    @foreach (var r in Model.RendicontoSettimana)
                    {
                        var ore = (TimeSpan.Parse(r.OrarioFine) - TimeSpan.Parse(r.OrarioInizio)).TotalHours;
                        <tr data-giorno="@r.Giorno">
                            <td>@r.Giorno</td>
                            <td>@r.Data</td>
                            <td>@r.OrarioInizio</td>
                            <td>@r.OrarioFine</td>
                            <td class="ore">@ore.ToString("0.##")</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="4"><strong>Totale</strong></td>
                        <td id="oreTotali">@Model.OreTotali</td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <!-- Inserimento orari -->
        <div class="col-md-6">
            <h6 class="mb-3">Aggiungi orario lavorativo</h6>
            <div class="mb-3">
                <label for="inputGiorno" class="form-label">Giorno (data)</label>
                <input type="date" class="form-control" id="inputGiorno">
            </div>
            <div class="mb-3">
                <label for="inputInizio" class="form-label">Ora inizio</label>
                <input type="time" class="form-control" id="inputInizio">
            </div>
            <div class="mb-3">
                <label for="inputFine" class="form-label">Ora fine</label>
                <input type="time" class="form-control" id="inputFine">
            </div>
            <button class="btn btn-success w-100" onclick="aggiungiOaggiornaRiga()">Aggiungi / aggiorna</button>
        </div>
    </div>
</div>
